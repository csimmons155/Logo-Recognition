//
//  FaceRecognition.pch
//  testopencv1
//
//  Created by Christopher Simmons on 4/20/16.
//  Copyright Â© 2016 Testing OpenCv C++. All rights reserved.
//
#include "opencv2/highgui/highgui.hpp"
#include "opencv2/core/core.hpp"
#include "opencv2/objdetect/objdetect.hpp"
#include "opencv2/face.hpp"
#include "opencv2/opencv.hpp"


#include <iostream>
#include <string>

#include <fstream>
#include <sstream>

using namespace std;
using namespace cv;

#ifndef FaceRecognition_pch
#define FaceRecognition_pch

// Include any system framework and library headers here that should be included in all compilation units.
// You will also need to set the Prefix Header build setting of one or more of your targets to reference this file.


static void readFile(const string& filename, vector<Mat>& images, vector<int>& labels, char separator = ';'){
    
    std::ifstream file(filename.c_str(), ifstream::in);
    
    if (!file) {
        CV_Error(CV_StsBadArg, "No valid file");
    }
    
    string line;
    string path;
    string label;
    
    while (getline(file,line)) {
        stringstream liness(line); //read the line from file as a string --> liness
        getline(liness, path, separator);
        getline(liness, label);
        if (!path.empty() && !label.empty()){
            //cout << "Here is path: " << path << endl;
            Mat im = imread(path, 0);
            //cout << "Image size: " << im.cols << endl;
            images.push_back(im);
            labels.push_back(atoi(label.c_str())); //convert c string label into int
        }
    }
    
} //end readFile

void LBPHFaceTraining(){
    
    vector<Mat> images;
    vector<int> labels;
    
    try{
        string filename = "/Users/christophersimmons/Output.txt";
        readFile(filename, images, labels);;
        cout << "Size of the image = " << images.size() << endl;
        cout << "Size of the labels =  " << labels.size() << endl;
        cout << ".....Starting Training...." << endl;
        
    } catch (cv::Exception& e){
        cerr << "Error opening file" <<  e.msg << endl;
        exit(1);
    }
    
    //CHANGE/ ADD TO THIS FOR OBJECT DECTECTION
    
    cv::Ptr <cv::face::FaceRecognizer> model = cv::face::createLBPHFaceRecognizer();
    
    
    
    model->train(images, labels);
    model->save("/Users/christophersimmons/LBPHface.yml");
    
    cout << " Training has finished. " << endl;
    
    waitKey(10000);
    
}

int facialRecognition(){
    
    cout << "Starting Facial Recognition...." << endl;
    
    //CHANGE THIS FOR OBJECT
    cv::Ptr <cv::face::FaceRecognizer> model = cv::face::createLBPHFaceRecognizer();
    
    model->load("/Users/christophersimmons/LBPHface.yml");
    
    Mat testImage = imread("/Users/christophersimmons/testFRimage.pgm", 0); //a sample image of me
    
    int img_width = testImage.cols;
    int img_height = testImage.rows;
    
    //WHERE OUR HAAR CASCADE WOULD GO
    string classifier = "/Users/christophersimmons/opencv/data/lbpcascades/lbpcascade_frontalface.xml";
    
    //ADD apple inc. classifier 
    string apple_classifier = "/Users/christophersimmons/opencv/data/haarcascades/apple_cascade.xml";
    
    //mcdonalds classifier
    string mcdonalds_classifier = "/Users/christophersimmons/opencv/data/haarcascades/mcdonalds_cascade.xml";
    
    
    CascadeClassifier face_cascade; // classifies the extracted features
    CascadeClassifier apple_cascade; // detect apple logo
    CascadeClassifier mcdonalds_cascade; //detect mcdonalds logo
    
    string window = "Capture - face detection";
    
    if (!face_cascade.load(classifier)){
        cout << "Error loading xml file" << endl;
        return -1;
        
    }
    
    if (!apple_cascade.load(apple_classifier)){
        cout << "Error loading xml file" << endl;
        return -1;
        
    }
    
    if (!mcdonalds_cascade.load(mcdonalds_classifier)){
        cout << "Error loading xml file" << endl;
        return -1;
        
    }
    
    
    
    VideoCapture cap(0);
    
    if (!cap.isOpened()) {
        
        cout << "Video cap is not opened" << endl;
        return -1;
        
    }
    
    namedWindow(window,1); //create a window and name it
    
    long count = 0;
    
    while(true){
        vector<Rect> faces; //window made around the detected face
        vector<Rect> apple_logos;
        vector<Rect> mcd_logos;
        Mat frame;
        Mat grayScaleVersion;
        Mat originalFrame;
        
        //get our frame
        cap >> frame;
        count = count + 1;
        
        if(!frame.empty()){
            
            originalFrame = frame.clone();
            cvtColor(originalFrame, grayScaleVersion, CV_BGR2GRAY);
            
            
            //used to detect faces of different sizes
            face_cascade.detectMultiScale(grayScaleVersion, faces, 1.1, 3, 0, cv::Size(90,90));
            
            //size = the min dimensions to detect the object
            apple_cascade.detectMultiScale(grayScaleVersion, apple_logos, 1.1, 3, 0, cv::Size(200,200));
            
            mcdonalds_cascade.detectMultiScale(grayScaleVersion, mcd_logos, 1.1, 3, 0, cv::Size(150,150));
            
            
            
            cout << faces.size() << " = Number of faces detected" << endl;
            cout << apple_logos.size() << " = Number of Apple logos detected" << endl;
            cout << mcd_logos.size() << " = Number of Mcdonalds logos detected" << endl;
            
            string frameset = to_string(count);
            string faceset = to_string(faces.size());
            
            
            string displayName = "";
            
            ///able to detect multiple faces in one frame 
            
            for(int i = 0; i < faces.size(); i++){
                
                Rect i_face = faces[i];
                Mat curr_face = grayScaleVersion(i_face);
                
                Mat resize_face;
                
                resize(curr_face, resize_face, cv::Size(img_width,img_height), 1.0, 1.0, INTER_CUBIC);
                
                int label = -1;
                double conf = 0;
                
                model->predict(resize_face, label, conf);
                
                //cout << "Our confidence " << conf << endl;
                
                //draw the rectange around face
                
                rectangle(originalFrame, i_face, CV_RGB(255, 0, 0), 1);
                string text = "Face Detected";
                
                cout << "The label is = " << label << endl;
                
                if(label == 0 || label == 2) {
                    displayName = "Chris";
                } else if (label == 1){
                    displayName = "Calvin";
                }
                else {
                    displayName = "Unknown Face";
                }
                
                int x = max(i_face.tl().x - 10, 0);
                int y = max(i_face.tl().y - 10, 0);
                
                putText(originalFrame, text, Point(x,y), FONT_HERSHEY_COMPLEX_SMALL, 1.0, CV_RGB(255, 0, 0), 1.0);
                
                
            } // end for loop
            
            for(int i = 0; i < apple_logos.size(); i++){
                Rect i_apple = apple_logos[i];
                if (i_apple.height < 300 && i_apple.height > 240) {
                    
                    rectangle(originalFrame, i_apple, CV_RGB(255, 0, 0), 1);
                    
                    int x = max(i_apple.tl().x - 10, 0);
                    int y = max(i_apple.tl().y - 10, 0);
                    
                    /*
                    string text = "Apple Logo size: " + std::to_string(i_apple.width)+ " x " + std::to_string(i_apple.height);
                    putText(originalFrame, text, Point(x,y), FONT_HERSHEY_COMPLEX_SMALL, 1.0, CV_RGB(48, 51, 60), 1.0);
                     */
                    
                    
                    string text = "Apple --- Check out the";
                    putText(originalFrame, text, Point(x,y), FONT_HERSHEY_COMPLEX_SMALL, 1.0, CV_RGB(48, 51, 60), 1.0);
                    
                    text = "iPhone 6s --- 3D Touch.";
                    putText(originalFrame, text, Point(x,y + 30), FONT_HERSHEY_COMPLEX_SMALL, 1.0, CV_RGB(48, 51, 60), 1.0);
                    text = "2MP photos. 4K video. One powerful phone.";
                    putText(originalFrame, text, Point(x,y + 60), FONT_HERSHEY_COMPLEX_SMALL, 1.0, CV_RGB(48, 51, 60), 1.0);
                    
                    
                    break;
                }
                
                
            }
            
            for(int i = 0; i < mcd_logos.size(); i++){
                Rect i_mcd = mcd_logos[i];
                if (i_mcd.height < 300) {
                    
                    //rectangle(originalFrame, i_mcd, CV_RGB(255, 0, 0), 1);
                    
                    int x = max(i_mcd.tl().x - 10, 0);
                    int y = max(i_mcd.tl().y - 10, 0);
                    
                    /*
                    string text = "Mcdonalds Logo size: " + std::to_string(i_mcd.width)+ " x " + std::to_string(i_mcd.height);
                     putText(originalFrame, text, Point(x,y), FONT_HERSHEY_COMPLEX_SMALL, 1.0, CV_RGB(48, 51, 60), 1.0);
                     */
                    
                    
                    string text = "Mcdonalds --- ";
                    putText(originalFrame, text, Point(x,y), FONT_HERSHEY_COMPLEX_SMALL, 1.0, CV_RGB(155, 39, 58), 1.0);
                    
                    text = "Try our new Chicken McNuggets!";
                    putText(originalFrame, text, Point(x,y + 30), FONT_HERSHEY_COMPLEX_SMALL, 1.0, CV_RGB(155, 39, 58), 1.0);
                    
                    text = "No artificial preservatives, flavors or colors.";
                    putText(originalFrame, text, Point(x,y + 60), FONT_HERSHEY_COMPLEX_SMALL, 1.0, CV_RGB(155, 39, 58), 1.0);
                    text = "*** FREE 4 PIECE ***";
                    putText(originalFrame, text, Point(x,y + 90), FONT_HERSHEY_COMPLEX_SMALL, 1.0, CV_RGB(155, 39, 58), 1.0);
                    
                    text = "-- with purchase of Large Extra Value Meal";
                    putText(originalFrame, text, Point(x,y + 120), FONT_HERSHEY_COMPLEX_SMALL, 1.0, CV_RGB(155, 39, 58), 1.0);
                    
                    
                    
                    break;
                }
                
                
            }
            

            
            
            
            
            putText(originalFrame, "Number of Frames: " + frameset, Point(30,60), CV_FONT_HERSHEY_COMPLEX_SMALL,1.0, CV_RGB(255, 0, 0), 1.0);
            
            putText(originalFrame, "Person: " + displayName, Point(30,90), CV_FONT_HERSHEY_COMPLEX_SMALL,1.0, CV_RGB(255, 0, 0), 1.0);
            
            cv::imshow(window, originalFrame);
          
            
        } // end while
        
        if (waitKey(30) >= 0){
            break;
        }
    } // end while loop
    
    return 0;
    
} // end facialRecognition








#endif /* FaceRecognition_pch */
